*.pyc
*.pyo
__pycache__
local_settings.py
db.sqlite3
db.sqlite3-journal
migrations
staticfiles
*.egg
*.egg-info
dist
build
.tox
.nox
.coverage
.cache
nosetests.xml
coverage.xml
*.mo
*.pot
*.log
local_settings.py

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# PyInstaller:
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into the executable.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*.json
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothes.is-cache/
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.pytest_cache

# Translations
*.mo
*.pot

# Django stuff:
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if different people have different dependencies installed in their virtual environments,
#   pipenv may install or uninstall dependencies according to the Pipfile.lock, which might cause confusion.
#   It is safer to put it in .gitignore and install dependencies according to the Pipfile.
Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/py_odata
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat-schedule.database

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak
pyvenv.cfg

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/


# Automation Scripts
backend/automation_scripts
backend/automation_scripts/*


# Excluding the build.sh file. I think it is causing the deployment failure
backend/build.sh 
